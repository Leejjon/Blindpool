package net.leejjon.blindpool.storage;

import com.google.appengine.api.datastore.*;
import com.google.gson.Gson;
import net.leejjon.blindpool.model.Pool;
import net.leejjon.blindpool.storage.persistence.Kind;
import net.leejjon.blindpool.storage.persistence.PoolProperties;
import org.hashids.Hashids;

import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Simple class to do stuff with the pools in the datastore. Could not be
 * bothered to create an entire DAO layer.
 *
 * @author Leejjon
 */
public class PoolDataStore {

    private final static Logger log = Logger.getLogger(PoolDataStore.class.getName());

    private final DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();

    public Pool createPool(Pool newPool) {
        // Create the entity of the pool.
        Entity pool = new Entity(Kind.POOL.toString());
        pool.setProperty(PoolProperties.PARTICIPANTS_AND_SCORES.name(), new Gson().toJson(newPool.getParticipantsAndScores()));
//        pool.

        // Store the new pool entity and return the key.
        Key key = datastore.put(pool);
        // TODO: Do the increment action and the save in one transaction maybe?


        // Grab the autogenerated id and turn it
        String hashId = new Hashids().encode(key.getId());
        newPool.setKey(hashId);

        try {
            new ShardedCounter().increment();
        } catch (Exception e) {
            log.log(Level.WARNING, "Something went wrong when incrementing the pool count. We caught the " +
                    "exception to make sure the pool was still saved. This means the pool count might be off.", e);
        }

        return newPool;
    }

    public Pool getPool(String key) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void deletePool() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public long countPools() {
//        Query countPools = new Query(Kind.POOL.toString());
//
//        /* TODO: If my app ever has more than 1000 pools I'll have to fix this.
//         * Read:
//         * https://cloud.google.com/appengine/articles/sharding_counters
//         * Use something like this:
//         * https://github.com/instacount/appengine-counter
//         */
//        FetchOptions fo = FetchOptions.Builder.withLimit(1000);
//        int entities = datastore.prepare(countPools).countEntities(fo);
        long poolCount = new ShardedCounter().count();

        log.log(Level.INFO, "Retrieved pool count: " + poolCount);
        return poolCount;
    }

    /**
     * @return The number of pools from the database.
     */
    public static long getPoolCount() {
        return new PoolDataStore().countPools();
    }
}
