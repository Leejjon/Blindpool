package net.leejjon.blindpool.storage;

import com.google.appengine.api.datastore.*;
import com.google.gson.Gson;
import net.leejjon.blindpool.model.Pool;
import net.leejjon.blindpool.storage.persistence.KindType;
import net.leejjon.blindpool.storage.persistence.PoolProperties;
import org.hashids.Hashids;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Simple class to do stuff with the pools in the datastore. Could not be
 * bothered to create an entire DAO layer.
 *
 * @author Leejjon
 */
public class PoolDataStore {
    private final static Logger log = Logger.getLogger(PoolDataStore.class.getName());
    private final static PoolDataStore INSTANCE = new PoolDataStore();

    private PoolDataStore() {}

    public static PoolDataStore getInstance() {
        return INSTANCE;
    }


    private final DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();

    public Pool createPool(Pool newPool) {
        // Create the entity of the pool.
        Entity pool = new Entity(KindType.POOL.toString());
        pool.setProperty(PoolProperties.PARTICIPANTS_AND_SCORES.name(), new Gson().toJson(newPool.getParticipantsAndScores()));
//        pool.

        // Store the new pool entity and return the key.
        Key key = datastore.put(pool);
        log.info("Key is: " + key.toString());
        // TODO: Do the increment action and the save in one transaction maybe?


        // Grab the autogenerated id and turn it
        String hashId = new Hashids().encode(key.getId());
        newPool.setKey(hashId);

        try {
            new ShardedCounter().increment();
        } catch (Exception e) {
            log.log(Level.WARNING, "Something went wrong when incrementing the pool count. We caught the " +
                    "exception to make sure the pool was still saved. This means the pool count might be off.", e);
        }

        return newPool;
    }

    public Pool getPool(String key) throws EntityNotFoundException {
//        EntityQuery build = Query.newEntityQueryBuilder().build();
        long[] decodedKey = new Hashids().decode(key);

        log.info("Decoded key size: " + decodedKey.length);

        Entity entity = datastore.get(KeyFactory.stringToKey(KeyFactory.createKeyString(KindType.POOL.toString(), decodedKey[0])));

        log.info("We found key:" + key + " " + entity.getKey().getId());

//        getPool.
        return new Pool(new ArrayList<>(), null, null, null);
    }

    public void deletePool() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public long countPools() {
        return new ShardedCounter().count();
    }

    /**
     * @return The number of pools from the database.
     */
    public static long getPoolCount() {
        return getInstance().countPools();
    }
}
